diff --git a/db/src/entity/User.ts b/db/src/entity/User.ts
index 004a340..f926acd 100644
--- a/db/src/entity/User.ts
+++ b/db/src/entity/User.ts
@@ -11,7 +11,7 @@ import md5 from 'md5';
 import omit from 'lodash/omit';
 import { Post } from './Post';
 import { Comment } from './Comment';
-import getDatabaseConnection from 'backend/getDatabaseConnection';
+// import getDatabaseConnection from 'backend/getDatabaseConnection';
 
 @Entity('users')
 export class User {
@@ -48,11 +48,11 @@ export class User {
       errors.username.push('用户名只能由大小写字母或数字组成');
     _name.length < 3 && errors.username.push('用户名不能少于 3 位');
     _name.length > 16 && errors.username.push('用户名不能多于 16 位');
-    const found = await (await getDatabaseConnection()).manager.findOne(
-      'User',
-      { where: { username: this.username } }
-    );
-    found && errors.username.push('用户名已被占用');
+    // const found = await (await getDatabaseConnection()).manager.findOne(
+    //   'User',
+    //   { where: { username: this.username } }
+    // );
+    // found && errors.username.push('用户名已被占用');
     this.password.length === 0 && errors.password.push('密码不能为空');
     this.password !== this.passwordConfirmation &&
       errors.passwordConfirmation.push('密码与确认密码不一致');
@@ -67,22 +67,22 @@ export class User {
     const errors = { username: [] as string[], password: [] as string[] };
     this.username.trim() === '' && errors.username.push('请填写用户名');
     this.password.trim() === '' && errors.password.push('请填写密码');
-    const found = await (await getDatabaseConnection()).manager.findOne(
-      'User',
-      { where: { username: this.username } }
-    ) as User;
-    if (found) {
-      if (found.passwordDigest !== md5(this.password)) {
-        errors.password.push('密码与用户名不匹配');
-      }
-    } else {
-      this.username.trim() !== '' && errors.username.push('用户不存在');
-    }
+    // const found = await (await getDatabaseConnection()).manager.findOne(
+    //   'User',
+    //   { where: { username: this.username } }
+    // ) as User;
+    // if (found) {
+    //   if (found.passwordDigest !== md5(this.password)) {
+    //     errors.password.push('密码与用户名不匹配');
+    //   }
+    // } else {
+    //   this.username.trim() !== '' && errors.username.push('用户不存在');
+    // }
 
     return {
       hasErrors: !!Object.values(errors).find(v => v.length > 0),
       errors,
-      found,
+      // found,
     };
   }
 
